// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";

import "protobuf_pydantic_gen/pydantic.proto";
import "google/api/annotations.proto";
option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      post: "/v1/helloworld"
      body: "*"
    };
  }
    rpc GEEDelete (HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      delete: "/v1/helloworld"
    };
  }

  rpc SayHelloStreamReply (HelloRequest) returns (stream HelloReply) {
    option (google.api.http) = {
      post: "/v1/helloworld/stream"
      body: "*"
    };
  }

  rpc SayHelloBidiStream (stream HelloRequest) returns (stream HelloReply) {
    option (google.api.http) = {
      post: "/v1/helloworld/ws"
      body: "*"
    };
  }
    rpc SayHelloStream (stream HelloRequest) returns (HelloReply) {
        option (google.api.http) = {
        post: "/v1/helloworld/sse"
        body: "*"
        };
    }
        rpc Health(google.protobuf.Empty) returns (HealthResponse) {
        option (google.api.http) = {
            get: "/health"
        };
    }
}
message HealthResponse {
    bool healthy = 1[json_name="healthy",(pydantic.field) = {description: "Indicates if the service is healthy",required:true}];
    string message = 2[json_name="message",(pydantic.field) = {description: "Health status message",required:false}];
}
// The request message containing the user's name.
message HelloRequest {
  string name = 1[(pydantic.field) = {
    description: "The name of the person to greet",
    example: "'John Doe'",
    default: "'John Doe'",
    required: true
  }];
  string language = 2[(pydantic.field) = {
    description: "The language of the greeting",
    example: "'en'",
    default: "'en'",
    required: false
  }];
}

// The response message containing the greetings
message HelloReply {
  string message = 1[(pydantic.field) = {
    description: "The greeting message",
    example: "'Hello, John Doe!'",
    default: "'Hello, John Doe!'",
    required: true
  }];
  string language = 2[(pydantic.field) = {
    description: "The language of the greeting",
    example: "'en'",
    default: "'en'",
    required: false
  }];
}